// ==UserScript==
// @name         GRV Tools com Endereço e Policial 3 em 1 v1.4.1
// @namespace    vitor.grv.tools
// @version      1.4.1
// @description  LISTA (canônica) + ENDEREÇO (Apreensão/Remoção/Ambos – opcional) + POLICIAL (opcional, via DETALHE). Situação por status, datas sem .000000. Exporta XLSX/TSV. UI aprovada (padrão: filtro "No pátio"; páginas 1→5; sem atalhos). Força 100 por página, aplica filtro de Situação JÁ NA API e coleta exatamente N×100 mantidos.
// @match        https://intranet.consorciorioparkingcarioca.com/*
// @run-at       document-start
// @grant        none
// @updateURL    https://vitorhaan.github.io/grv-tools-scripts/dist/grv_tools_com_endereco_e_policial_3_em_1_1_4_1_ofuscado.user.js
// @downloadURL  https://vitorhaan.github.io/grv-tools-scripts/dist/grv_tools_com_endereco_e_policial_3_em_1_1_4_1_ofuscado.user.js
// ==/UserScript==


(function(){const d="";(0,eval)((typeof atob==='function'?atob:d=>decodeURIComponent(escape(
(function(b){
const c='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';let s='',i=0,e1,e2,e3,e4,ch1,ch2,ch3;
b=b.replace(/[^A-Za-z0-9\+\/\=]/g,'');
while(i<b.length){e1=c.indexOf(b.charAt(i++));e2=c.indexOf(b.charAt(i++));e3=c.indexOf(b.charAt(i++));e4=c.indexOf(b.charAt(i++));
ch1=(e1<<2)|(e2>>4);ch2=((e2&15)<<4)|(e3>>2);ch3=((e3&3)<<6)|e4;
s+=String.fromCharCode(ch1);if(e3!=64)s+=String.fromCharCode(ch2);if(e4!=64)s+=String.fromCharCode(ch3);}
return s;})(d)))));})();
