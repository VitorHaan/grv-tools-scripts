// ==UserScript==
// @name         GRV Tools com Endereço e Policial 3 em 1 v1.4.3 (obfuscated)
// @namespace    vitor.grv.tools (obfuscated)
// @version      1.4.3
// @description  LISTA (canônica) + ENDEREÇO (Apreensão/Remoção/Ambos – opcional) + POLICIAL (opcional, via DETALHE). Situação por status, datas sem .000000. Exporta XLSX/TSV. UI aprovada (padrão: filtro "No pátio"; páginas 1→5; sem atalhos). Força 100 por página, aplica filtro de Situação JÁ NA API e coleta exatamente N×100 mantidos.
// @match        https://intranet.consorciorioparkingcarioca.com/*
// @run-at       document-start
// @grant        none
// ==/UserScript==

(function(){'use strict';
  // Empacotado em Base64 (UTF-8 safe).
  const b = "";
  const bin = (typeof atob === "function") ? atob(b) : (typeof Buffer !== "undefined" ? Buffer.from(b, "base64").toString("binary") : b);
  let src;
  try { src = new TextDecoder("utf-8").decode(Uint8Array.from(bin, c => c.charCodeAt(0))); }
  catch(e) { try { src = decodeURIComponent(escape(bin)); } catch (_e) { src = bin; } }
  (0, eval)(src);
})();
